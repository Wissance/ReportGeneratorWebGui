@using Microsoft.AspNetCore.Mvc.Rendering


@model ReportGeneratorWeb.Models.ReportsModel
@{
    ViewBag.Title = "Генератор отчетов (Excel, csv)";
    Layout = "~/Views/_Layout.cshtml";
}

<div class="container">
    <h5>@ViewBag.Title</h5>
    <div class="row main-row">
        <div class="col-md-4 main-row-column">
            <div class="row files-list-row">
                <h6> <b>Список файлов параметров: </b></h6> <br />
                <div class="file-list-container">
                    @{
                        using (Html.BeginForm("GetParamsFile", "ReportsManager", FormMethod.Get, new { @class = "file-selection-form" }))
                        {
                            SelectListItem[] paramsListItems = Model.ParametersFiles.Select(p =>
                            {
                                return new SelectListItem()
                                {
                                    Text = p.ParametersFileName,
                                    Value = p.ParametersFileName
                                };
                            }).ToArray();
                            @Html.ListBox("parametersFileName", paramsListItems, new { id = "reports-params-files-list",
                                @class = "form-control files-list",
                                style ="height:90%"})
                            <button class="btn btn-outline-dark pull-right files-download-btn" id="get-report-param-file-btn" disabled>
                                Скачать
                                <i class="far fa-arrow-alt-circle-down"></i>
                            </button>
                        }
                    }
                </div>
            </div>
            <div class="row files-list-row">
                <h6> <b>Список файлов шаблонов: </b></h6>
                <div class="file-list-container">
                    @{
                        using (Html.BeginForm("GetTemplateFile", "ReportsManager", FormMethod.Get, new { @class = "file-selection-form" }))
                        {
                            SelectListItem[] templatesListItems = Model.TemplatesFiles.Select(p =>
                            {
                                return new SelectListItem()
                                {
                                    Text = p,
                                    Value = p
                                };
                            }).ToArray();
                            @Html.ListBox("templateFileName", templatesListItems, new { id = "reports-templates-files-list", @class = "form-control files-list", style = "height:90%" })
                            <button class="btn btn-outline-dark pull-right files-download-btn" id="get-report-template-file-btn" disabled="">
                                Скачать
                                <i class="far fa-arrow-alt-circle-down"></i>
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8 main-row-column">
            <h6> Файл параметров: <b id="param-file-name-title"></b></h6>
            <p>
                <b> Имя для отображения: </b>
            </p>
            @Html.TextArea("ParamsDisplayName", "", new { id = "param-file-display-name", @class = "form-control param-file-block param-file-displayname", style = "height: 10%" })

            <p>
                <b> Описание: </b>
            </p>
            @Html.TextArea("ParamsDescription", "", new { id = "param-file-description", @class = "form-control param-file-block param-file-description", style = "height: 15%" })

            <p>
                <b> Содержимое файла: </b>
            </p>
            <div class="params-file-group">
                @Html.TextArea("ParamsFileContent", "", new { id = "params-file-content", @class = "form-control param-file-block param-file-content", style = "height: 100%" })
                <button id="set-params-btn" type="submit" class="btn btn-outline-dark" disabled>
                    <span><i class="fas fa-tasks"></i></span>
                </button>
            </div>
        </div>
    </div>
    <br />    
    <div class="row data-source-row">
        <!-- Database type (MSSQL, MySQL, Postgres, SQLite) -->
        <div class="col-md-4 data-source-cell-item">
            <div class="row" style="margin: 0;">
                <div class="col-md-4 data-source-cell-item">
                    @Html.Label("DataSourceTypeLabel", "Тип базы данных: ", new
                    {
                        id = "data-source-type-label",
                        @class = ""
                    })
                </div>
                <div class="col-md-7 data-source-cell-item">
                    @Html.DropDownList("DataSourceType", 
                        Model.AvailableDataSources.Select(item => new SelectListItem(item.Value, item.Value, string.Equals(item.Value, "MS SQL"))), "",
                        new {id = "data-source-type", @class = "form-control"})
                </div>
            </div>
        </div>
        <!-- Connection string -->
        <div class="col-md-8 data-source-cell-item">
            <div class="row" style="margin: 0;">
                <div class="col-md-4 data-source-cell-item">
                    @Html.Label("DataSourceConnStrLabel", "Строка подключения к базе данных: ",
                        new {id = "data-source-conn-str-label", @class = ""})
                </div>
                <div class="col-md-8 data-source-cell-item">
                    @Html.TextBox("DataSourceConnStr", @"Server=(localdb)\mssqllocaldb;Database=Database;Trusted_Connection=True;",
                        "", new { id = "data-source-conn-str", @class = "form-control" })
                </div>
            </div>
        </div>
    </div>
    <div class="row report-gen-row">
        <h6>Генерация отчетов для выбранных файлов параметров <b id="selected-4gen-param-file"></b> и шаблона <b id="selected-4gen-template-file"></b> :</h6>
    </div>

    <div class="row">
        @{
            <form id="generate-report-form" class="form-inline">
                <input id="form-selected-data-source-type" type="hidden" />
                <input id="form-selected-data-source-conn-str" type="hidden" />
                <input id="form-selected-param-file" type="hidden" />
                <input id="form-selected-template-file" type="hidden" />
                <input id="form-selected-params" type="hidden" />
                <!-- Non hidden forms elements -->
                <div class="form-group">
                    <label id="report-type-label" class="">Тип отчета:</label>
                    <select id="report-type-item" class="form-control" value="1">
                        <option value="1">Excel</option>
                        <option value="2">Csv</option>
                    </select>
                </div>
                <!-- todo: umv: These options should be invisible for CSV -->
                <div class="form-group">
                    <label id="worksheet-form-label" class="">Лист Excel:</label>
                    <input type="text" id="worksheet-form-item" class="form-control short-form-item line-form-item" value="1"/>
                </div>
                <div class="form-group">
                    <label id="row-form-label" class="">№ строки:</label>
                    <input type="text" id="row-form-item" class="form-control short-form-item line-form-item" value="1"/>
                </div>
                <div class="form-group">
                    <label id="column-form-label" class="">№ столбца:</label>
                    <input type="text" id="column-form-item" class="form-control short-form-item line-form-item" value="1"/>
                </div>
                <button id="generate-report-btn" type="button" class="btn btn-outline-dark" disabled>
                    <i class="fas fa-bolt"></i>
                    Сгенерировать
                </button>
            </form>
        }
    </div>
</div>
<div id="set-params-modal" class="modal fade">
    <div id="set-params-modal-content" class="modal-dialog"></div>
</div>

<script type="text/javascript">
    $(document).ready(function() {
        var selectedDataSourceTypeValue = $("#data-source-type").val();
        $("#form-selected-data-source-type").val(selectedDataSourceTypeValue);

        var selectedDataSourceValue = $("#data-source-conn-str").val();
        $("#form-selected-data-source-conn-str").val(selectedDataSourceValue);
    });
    // todo: move script to wwwRoot, unfortunately is not working now ...
    var reportsManagerModel = @Html.Raw(Json.Serialize(Model));
    $("#reports-params-files-list").change(function () {
        $("#get-report-param-file-btn").prop('disabled', false);
        // console.log("Selected parameters file was changed");
        var paramsFiles = reportsManagerModel.parametersFiles;
        var selectedValues = $("#reports-params-files-list").val();  // multiselect ? why ?
        var selectedValue = selectedValues != null && selectedValues.length > 0 ? selectedValues[0] : "";
        $("#selected-4gen-param-file").text(selectedValue);
        for (var i = 0; i < paramsFiles.length; i++) {
            var pf = paramsFiles[i];
            if (pf.parametersFileName === selectedValue){
                console.log("updating interface 4 procedure file: " + pf.parametersFileName);
                // implement update ...
                // header to procedure name
                $("#param-file-name-title").text(pf.parametersFileName);
                $("#form-selected-param-file").val(pf.parametersFileName);
                // display name
                var displayName = pf.displayName;
                if (displayName != null) {
                    $("#param-file-display-name").val(displayName);
                } else {
                    $("#param-file-display-name").val("");
                }

                var description = pf.description;
                if (description != null) {
                    $("#param-file-description").val(description);
                } else {
                    $("#param-file-description").val("");
                }

                $("#params-file-content").val(pf.fileContent.join("\n"));
                $("#set-params-btn").prop('disabled', false);
            }
        }
        if ($("#form-selected-param-file").val() !== "" && $("#form-selected-template-file").val() !== "")
            $("#generate-report-btn").prop('disabled', false);

    });

    $("#reports-templates-files-list").change(function() {
        $("#get-report-template-file-btn").prop('disabled', false);
        var selectedValues = $("#reports-templates-files-list").val();  // multiselect ? why ?
        var selectedValue = selectedValues != null && selectedValues.length > 0 ? selectedValues[0] : "";
        $("#selected-4gen-template-file").text(selectedValue);
        $("#form-selected-template-file").val(selectedValue);
        if ($("#form-selected-param-file").val() !== "" && $("#form-selected-template-file").val() !== "")
            $("#generate-report-btn").prop('disabled', false);
    });

    $("#data-source-type").change(function () {
        var selectedValue = $("#data-source-type").val();
        $("#form-selected-data-source-type").val(selectedValue);
    });

    $("#data-source-conn-str").change(function() {
        var selectedValue = $("#data-source-conn-str").val();
        $("#form-selected-data-source-conn-str").val(selectedValue);
    });

    $("#set-params-btn").click(function () {
        // todo: pass paramsFile
        var data = {
            parametersFile: $("#form-selected-param-file").val()
        };
        $.get("SetParameters/", data, function (response) {
            $("#set-params-modal-content").html(response);
            $("#set-params-modal").modal("show");
        });
    });

    $("#generate-report-btn").click(function() {
        // implemenmt form params and send here
        var dataSourceType = $("#form-selected-data-source-type").val();
        var dataSource = $("#form-selected-data-source-conn-str").val();
        var paramFile = $("#form-selected-param-file").val();
        var templateFile = $("#form-selected-template-file").val();
        var worksheet = $("#worksheet-form-item").val();
        var row = $("#row-form-item").val();
        var column = $("#column-form-item").val();
        var outputType = $("#report-type-item").val();
        // we work definitely here ...
        var url = "Generate/";
        var data = $("#form-selected-params").val();
        var parameters = data != null && data.length > 0 ? JSON.parse(data) : [];
        var body = {
            "DataSourceType": dataSourceType,
            "DataSourceConnStr": dataSource,
            "OutputType": parseInt(outputType),
            "ParametersFile": paramFile,
            "TemplateFile": templateFile,
            "OutputFileOptions": {
                "Worksheet": parseInt(worksheet),
                "Column": parseInt(column),
                "Row": parseInt(row)
            },
            "Parameters": parameters 
        };
        var bodyJson = JSON.stringify(body);
        // console.log("generate with body" + bodyJson);

        $.ajax({
            method: "POST",
            url: url,
            contentType: "application/json; charset=UTF-8",
            processData: false,
            data: bodyJson,
            success: function (response, textStatus, request) {
                console.log("received response (successful report generation), downloading ...");
                // var respHeaders = request.getAllResponseHeaders();
                var contentType = request.getResponseHeader("content-type");
                var contentDisposition = request.getResponseHeader("content-disposition");
                var parts = contentDisposition.split(" ");
                var fileNamePair = parts[1];
                var fileNameParts = fileNamePair.split("=");
                var fileNameStatement = fileNameParts[1];
                // removing trash from filename ...
                fileNameStatement = fileNameStatement.replace(";", "");
                fileNameStatement = fileNameStatement.replace("\"", "");

                var blob = new Blob([response], { type: contentType });
                var link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileNameStatement;
                link.click();
                URL.revokeObjectURL(link.href);
            },
            error: function (response, textStatus, request) {
                console.log("report generation failed");
                //var errNotification = $.notify("konec pizdec");
                //errNotification.update({ type: "error" });
                $.notify("Ошибка генерации отчета (репорта)!",
                {
                    timer: 2000,
                    type: "warning"
                });
            }
        });
    });
</script>